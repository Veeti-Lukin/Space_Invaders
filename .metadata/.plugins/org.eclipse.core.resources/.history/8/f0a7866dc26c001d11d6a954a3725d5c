/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 *
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

// Main program for exercise

//****************************************************
//By default, every output used in this exercise is 0
//****************************************************
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xgpiops.h"
#include "xttcps.h"
#include "xscugic.h"
#include "xparameters.h"
#include "Pixel.h"
#include "Interrupt_setup.h"

//********************************************************************
//***************TRY TO READ COMMENTS*********************************
//********************************************************************

//***Hint: Use sleep(x)  or usleep(x) if you want some delays.****
//***To call assembler code found in blinker.S, call it using: blinker();***


//Comment this if you want to disable all interrupts
#define enable_interrupts




/***************************************************************************************
Name: Veeti Lukin
Student number:

Name: Santeri Virtanen
Student number: k427639


Tick boxes that you have coded

Led-matrix driver		Game		    Assembler
	[x]					[x]					[]

Brief description:

*****************************************************************************************/

uint8_t CURRENT_OPEN_LINE = 0;
uint8_t SPACE_SHIP_COLOR[3] = {255,172,26};
uint8_t ALIEN_COLOR[3] = {255, 0, 255};
uint8_t PROJECTILE_COLOR[3] = {0, 255, 0};
uint8_t SPACE_SHIP_XLOCATION = 0;
uint8_t ALIEN_XLOCATION = 0;
uint8_t ALIEN_MOVE_DIRECTION = 0;
uint8_t PROJECTILE_LOCATION[2] = {9,9};
uint8_t CAN_SHOOT = 1;
uint8_t GAME_LOOP = 1;
uint8_t SHOT_COUNT = 0;
// maxium must be 24 or less
uint8_t MAX_SHOT_COUNT = 10;

int main()
{
	//**DO NOT REMOVE THIS****
	    init_platform();
	//************************


#ifdef	enable_interrupts
	    init_interrupts();
#endif


	    //setup screen
	    setup();

#ifdef led_blinker
	    blinker();
#endif
	    /* testing
	    SetPixel(0,0,186,85,211);
	    run(0);
	    open_line(1);
		*/
	    Xil_ExceptionEnable();

	    //Try to avoid writing any code in the main loop.
		while(1){


		}


		cleanup_platform();
		return 0;
}

/*
 * figure of the space ship:
 * 	 #
 *  ###
 */
void DrawSpaceShip(){
	uint8_t r = SPACE_SHIP_COLOR[0];
	uint8_t g = SPACE_SHIP_COLOR[1];
	uint8_t b = SPACE_SHIP_COLOR[2];
	//bottom row
	SetPixel(SPACE_SHIP_XLOCATION,7, r, g, b);
	SetPixel(SPACE_SHIP_XLOCATION+1,7, r, g ,b);
	SetPixel(SPACE_SHIP_XLOCATION+2,7, r, g ,b);
	// bottom +1 row
	SetPixel(SPACE_SHIP_XLOCATION+1,6, r, g, b);
}

void DrawAlien(){
	uint8_t r = ALIEN_COLOR[0];
	uint8_t g = ALIEN_COLOR[1];
	uint8_t b = ALIEN_COLOR[2];

	SetPixel(ALIEN_XLOCATION, 0, r, g, b);
}

void DrawProjectile(){
	uint8_t r = PROJECTILE_COLOR[0];
	uint8_t g = PROJECTILE_COLOR[1];
	uint8_t b = PROJECTILE_COLOR[2];

	if(PROJECTILE_LOCATION[1] < 8 ){
		SetPixel(PROJECTILE_LOCATION[0], PROJECTILE_LOCATION[1], r, g, b);
	}
	else {
		CAN_SHOOT = 1;
	}
}

void DrawEndScreen(){
	ClearPixels();
	// draw E
	SetPixel(0, 0, 255, 255, 255);
	SetPixel(0, 1, 255, 255, 255);
	SetPixel(0, 2, 255, 255, 255);
	SetPixel(0, 3, 255, 255, 255);
	SetPixel(0, 4, 255, 255, 255);

	SetPixel(1, 0, 255, 255, 255);
	SetPixel(1, 2, 255, 255, 255);
	SetPixel(1, 4, 255, 255, 255);

	// draw n
	SetPixel(2, 0, 255, 255, 0);
	SetPixel(2, 1, 255, 255, 0);
	SetPixel(2, 2, 255, 255, 0);
	SetPixel(2, 3, 255, 255, 0);
	SetPixel(2, 4, 255, 255, 0);

	SetPixel(3, 0, 255, 255, 0);

	SetPixel(4, 1, 255, 255, 0);
	SetPixel(4, 2, 255, 255, 0);
	SetPixel(4, 3, 255, 255, 0);
	SetPixel(4, 4, 255, 255, 0);

	// draw D
	SetPixel(5, 0, 0, 255, 255);
	SetPixel(5, 1, 0, 255, 255);
	SetPixel(5, 2, 0, 255, 255);
	SetPixel(5, 3, 0, 255, 255);
	SetPixel(5, 4, 0, 255, 255);

	SetPixel(6, 0, 0, 255, 255);
	SetPixel(6, 4, 0, 255, 255);

	SetPixel(7, 1, 0, 255, 255);
	SetPixel(7, 2, 0, 255, 255);
	SetPixel(7, 3, 0, 255, 255);

	// draw amount of shot used
	uint8_t x = 0;
	uint8_t y = 7;
	for(uint8_t point = SHOT_COUNT; point != 0; point--) {
		// make pixels red if lost
		if (SHOT_COUNT == MAX_SHOT_COUNT) {
			SetPixel(x, y, 255, 0, 0);
		}
		// green if won
		else{
			SetPixel(x, y, 0, 255, 0);
		}
		x++;
		if (x == 8){
			x = 0;
			y--;
		}
	}
}
void MoveSpaceShipLeft(){
	if (SPACE_SHIP_XLOCATION > 0) { SPACE_SHIP_XLOCATION--; }
}

void MoveSpaceShipRight() {
	if (SPACE_SHIP_XLOCATION < 5) { SPACE_SHIP_XLOCATION++; }
}

void MoveAlien(){
	// if alien is moving right
	if (ALIEN_MOVE_DIRECTION == 0){
		ALIEN_XLOCATION++;
		// if alien reaches right max coordinate change it to move left
		if(ALIEN_XLOCATION == 7) {
			ALIEN_MOVE_DIRECTION = 1;
		}
	}

	//alien moving left
	else {
		ALIEN_XLOCATION--;
		// if alien reaches left max coordinate change it to move right
		if(ALIEN_XLOCATION == 0) {
			ALIEN_MOVE_DIRECTION = 0;
		}
	}
}

void Shoot(){
	if(CAN_SHOOT){
		PROJECTILE_LOCATION[0] = SPACE_SHIP_XLOCATION+1;
		PROJECTILE_LOCATION[1] = 5;
		CAN_SHOOT = 0;
		SHOT_COUNT ++;
	}
}

void MoveProjectile(){
	if (PROJECTILE_LOCATION[1] >= 0 && PROJECTILE_LOCATION[1] < 8){ PROJECTILE_LOCATION[1]--; }
	if (PROJECTILE_LOCATION[1] == 9) { CAN_SHOOT = 1; }
}


void AlienProjectileCollisinCheck(){
	if (ALIEN_XLOCATION == PROJECTILE_LOCATION[0] && PROJECTILE_LOCATION[1] == 0)
	{
		GAME_LOOP = 0;
		DrawEndScreen();
	}
}

void CheckIfGameIsLost(){
	if(SHOT_COUNT == MAX_SHOT_COUNT){
		GAME_LOOP = 0;
		DrawEndScreen();
	}
}

void Reset(){
	GAME_LOOP = 1;
	SPACE_SHIP_XLOCATION = 0;
	ALIEN_XLOCATION = 0;
	PROJECTILE_LOCATION[0] = 9;
	PROJECTILE_LOCATION[1] = 9;
	ALIEN_MOVE_DIRECTION = 0;
	SHOT_COUNT = 0;
}

//Timer interrupt handler for led matrix update. Frequency is 800 Hz
void TickHandler(void *CallBackRef){
	//Don't remove this
	uint32_t StatusEvent;

	//exceptions must be disabled when updating screen
	Xil_ExceptionDisable();



	//****Write code here ****
	if(GAME_LOOP == 1){
	    DrawSpaceShip();
	    DrawAlien();
	    DrawProjectile();
	}

	if (CURRENT_OPEN_LINE > 7) CURRENT_OPEN_LINE = 0;
	open_line(100);
	run(CURRENT_OPEN_LINE);
	open_line(CURRENT_OPEN_LINE);
	CURRENT_OPEN_LINE++;

	if (GAME_LOOP == 1) {
		ClearPixels();
	}


	//****END OF OWN CODE*****************

	//*********clear timer interrupt status. DO NOT REMOVE********
	StatusEvent = XTtcPs_GetInterruptStatus((XTtcPs *)CallBackRef);
	XTtcPs_ClearInterruptStatus((XTtcPs *)CallBackRef, StatusEvent);
	//*************************************************************
	//enable exceptions
	Xil_ExceptionEnable();
}


//Timer interrupt for moving alien, shooting... Frequency is 10 Hz by default
void TickHandler1(void *CallBackRef){

	//Don't remove this
	uint32_t StatusEvent;

	//****Write code here ****
	if (GAME_LOOP == 1) {
		MoveAlien();
		MoveProjectile();
		AlienProjectileCollisinCheck();
		CheckIfGameIsLost();
	}


	//****END OF OWN CODE*****************
	//clear timer interrupt status. DO NOT REMOVE
	StatusEvent = XTtcPs_GetInterruptStatus((XTtcPs *)CallBackRef);
	XTtcPs_ClearInterruptStatus((XTtcPs *)CallBackRef, StatusEvent);

}


//Interrupt handler for switches and buttons.
//Reading Status will tell which button or switch was used
//Bank information is useless in this exercise
void ButtonHandler(void *CallBackRef, u32 Bank, u32 Status){
	//****Write code here ****

	//Hint: Status==0x01 ->btn0, Status==0x02->btn1, Status==0x04->btn2, Status==0x08-> btn3, Status==0x10->SW0, Status==0x20 -> SW1

	//If true, btn0 was used to trigger interrupt
	if(Status==0x01){
		Shoot();
	}

	if(Status == 0x02){
		MoveSpaceShipRight();
	}

	if(Status == 0x04){
		MoveSpaceShipLeft();
	}

	if(Status == 0x08){
		Shoot();
	}

	if(Status == 0x10)
	{
		if (GAME_LOOP == 1) {
			DrawEndScreen();
			GAME_LOOP = 0;
		}

		else{
			Reset();
		}
	}





	//****END OF OWN CODE*****************
}
