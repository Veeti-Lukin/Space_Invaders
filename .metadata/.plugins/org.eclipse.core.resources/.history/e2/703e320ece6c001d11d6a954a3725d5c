
//ARM INSTRUCTIONS
//Instructions are conditional
//32-bit instruction


//How to load data from memory:
//LDR R0, =variable 	(Load address to register. You can use any global variable defined in main.c, or variable found here)
//LDR R1, [R0] 			(Load data from address, in this case 32-bit data)
//LDRB R1, [R0] 		(Load data from address, in this case 8-bit data)
//******
//LDR R0, =0x123456		(Load address to register, Use only if you know the memory address)
//LDR R1, [R0]			(load data from address, in this case 32-bit data)
//LDRB R1, [R0]			(load data from address, in this case 8-bit data)

//How to store data to memory:
//STR R1,[R0]			(R1 contains the data and R0 contains the address where  to store, 32-bit)
//STRB R1,[R0]			(R1 contains the data and R0 contains the address where  to store, 8-bit)


.data
	dir: .byte 1		//8-bit variable for direction 1 for left 0 for right

.text

.global blinker

blinker:

	push {r0}				//Push used register to stack
	push {r1}
	push {r2}
	push {r3}

	ldr r0, =0x41200000		//load the 32-bit address of led controlling "register" to register 0
	ldrb r1, [r0]			//load to led controlling "registers" value to register 1
	ldr r2, =dir			//load the 32-bit address of the leds moving direction variable to registet 2
	ldrb r3, [r2]			//load the moing direction variable to register 3

	cmp r1, #0				//compare if led controlling register is 0
	beq position_zero		//if it is branch to position_zero


	b end					//branch to end
position_zero:
	mov r1, #1				//set led control value to be 1
	b end					// branch to end

shift_left:
	lsl r1, r1, #1			//shift led control value left once
	b end					// branch to end

shift_right:

	b end					// branch to end

end:
	str r1, [r0]			//store new led controlling "register" binary value
	pop {r3}				//Pop register from stack, Remember the pop order if used more than one register (first pushed, last popped)
	pop {r2}
	pop {r1}
	pop {r0}
	bx lr					//Return to place where this function has been called.






